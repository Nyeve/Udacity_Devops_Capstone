version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@0.2.3

commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
          
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name eksctl-devopscapstone-nodegroup-nodegroup --region us-east-1
            aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-cluster --region us-east-1
parameters:
  docker_image:
    type: string
    default: python:3.10.0-bullseye 

jobs:
  linting:
    docker:
      - image: << pipeline.parameters.docker_image >>
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            cd Makefile
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint     
  build-and-push-image:
    machine: true
    steps:
         - checkout
         - run: |
            docker build -t tic-tac-toe:latest .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            docker push tic-tac-toe:latest
  # Creation of Cluster        
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: tic-tac-toe
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: tic-tac-toe
          node-type: t3.medium
          

   # Test the Cluster               
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl get services -o wide
          name: Test cluster

workflows:
  deployment:
    jobs:
      - linting
      - build-and-push-image:
          requires:
             - linting

      - create-cluster:
          requires:
            - build-and-push-image
      - test-cluster:
          cluster-name: tic-tac-toe
          requires:
            - create-cluster